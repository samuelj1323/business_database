/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend;

import java.util.*;
import java.sql.SQLException;
import java.io.*;
import backend.*;

/**
 *
 * @author samuelmahan
 */
public class frame extends javax.swing.JFrame {
    public static int tableCounter = 1;
    public static int colCounter = 1;
    public static String[] ColumnTable = {};
    public static String[] businessCols = {"bus_id","loc_id","cat_id","bus_name","bus_rating","bus_reviewcount"};
    public static String[] categoriesCols = {"cat_id","cat_name"};
    public static String[] eliteCols = {"hist_id","usr_id","hist_year","hist_current"};
    public static String[] locationsCols = {"loc_id","loc_address","loc_city","loc_state","loc_zip","loc_latitude","loc_longitude"};
    public static String[] reviewsCols = {"rev_id","usr_id","bus_id","rev_rating","rev_date","rev_text","rev_complimentsrecv"};
    public static String[] tipsCols = {"tip_id","usr_id","bus_id","tip_date","tip_text","tip_complimentsrecv"};
    public static String[] usersCols = {"usr_id","usr_fname","usr_reviewcount","usr_joindate","usr_averagerating","usr_currentlyelite","usr_complimentsrecv"};
    public static int keyCounter = 0;
    /**
     * Creates new form frame
     */
    public frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outputType = new javax.swing.ButtonGroup();
        sortBy = new javax.swing.ButtonGroup();
        QuestionNums = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Table1 = new javax.swing.JComboBox<>();
        addTable = new javax.swing.JButton();
        Table2 = new javax.swing.JComboBox<>();
        deleteTable2 = new javax.swing.JButton();
        Table3 = new javax.swing.JComboBox<>();
        deleteTable3 = new javax.swing.JButton();
        Table4 = new javax.swing.JComboBox<>();
        deleteTable4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        columns1 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        columns2 = new javax.swing.JComboBox<>();
        deleteCols2 = new javax.swing.JButton();
        columns3 = new javax.swing.JComboBox<>();
        deleteCols4 = new javax.swing.JButton();
        columns4 = new javax.swing.JComboBox<>();
        deleteCols3 = new javax.swing.JButton();
        columns5 = new javax.swing.JComboBox<>();
        deleteCols6 = new javax.swing.JButton();
        columns6 = new javax.swing.JComboBox<>();
        deleteCols5 = new javax.swing.JButton();
        relation1 = new javax.swing.JComboBox<>();
        key1 = new javax.swing.JTextField();
        relation2 = new javax.swing.JComboBox<>();
        relation3 = new javax.swing.JComboBox<>();
        relation4 = new javax.swing.JComboBox<>();
        relation5 = new javax.swing.JComboBox<>();
        relation6 = new javax.swing.JComboBox<>();
        key2 = new javax.swing.JTextField();
        key3 = new javax.swing.JTextField();
        key4 = new javax.swing.JTextField();
        key5 = new javax.swing.JTextField();
        key6 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        sort = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        Entries = new javax.swing.JTextField();
        window = new javax.swing.JRadioButton();
        textFile = new javax.swing.JRadioButton();
        ascending = new javax.swing.JRadioButton();
        descending = new javax.swing.JRadioButton();
        search1 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Rest1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Rest2 = new javax.swing.JTextField();
        search2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        City1 = new javax.swing.JTextField();
        City2 = new javax.swing.JTextField();
        State1 = new javax.swing.JTextField();
        State2 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        question2 = new javax.swing.JRadioButton();
        question3 = new javax.swing.JRadioButton();
        question4 = new javax.swing.JRadioButton();
        searchTerm1 = new javax.swing.JTextField();
        search3 = new javax.swing.JButton();
        prompting1 = new javax.swing.JLabel();
        searchTerm2 = new javax.swing.JTextField();
        prompting2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(900, 683));

        jLabel1.setForeground(new java.awt.Color(102, 0, 51));
        jLabel1.setText("Business Database");
        jLabel1.setAlignmentY(1.0F);
        jLabel1.setPreferredSize(new java.awt.Dimension(130, 20));
        jLabel1.setSize(new java.awt.Dimension(120, 40));

        jSeparator4.setBackground(new java.awt.Color(51, 0, 51));
        jSeparator4.setForeground(new java.awt.Color(102, 0, 51));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Table:");

        Table1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Businesses", "Categories", "EliteHistory", "Locations", "Reviews", "Tips", "Users" }));
        Table1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Table1ActionPerformed(evt);
            }
        });

        addTable.setText("Add Table");
        addTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableAdded(evt);
            }
        });

        Table2.setVisible(false);
        Table2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Businesses", "Categories", "EliteHistory", "Locations", "Reviews", "Tips", "Users" }));
        Table2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Table2ActionPerformed(evt);
            }
        });

        deleteTable2.setText("Delete");
        deleteTable2.setVisible(false);
        deleteTable2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTable2ActionPerformed(evt);
            }
        });

        Table3.setVisible(false);
        Table3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Businesses", "Categories", "EliteHistory", "Locations", "Reviews", "Tips", "Users" }));
        Table3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Table3ActionPerformed(evt);
            }
        });

        deleteTable3.setVisible(false);
        deleteTable3.setText("Delete");
        deleteTable3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTable3ActionPerformed(evt);
            }
        });

        Table4.setVisible(false);
        Table4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Businesses", "Categories", "EliteHistory", "Locations", "Reviews", "Tips", "Users" }));
        Table4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Table4ActionPerformed(evt);
            }
        });

        deleteTable4.setVisible(false);
        deleteTable4.setText("Delete");
        deleteTable4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTable4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Table1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Table2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Table3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Table4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteTable4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteTable3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteTable2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Table1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Table2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteTable2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Table3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteTable3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Table4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteTable4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(addTable))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Columns:");

        columns1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));

        columns1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                columns1ItemStateChanged(evt);
            }
        });

        jButton4.setText("Add Column");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Add Key");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        columns2.setVisible(false);
        columns2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        columns2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columns2ActionPerformed(evt);
            }
        });

        deleteCols2.setVisible(false);
        deleteCols2.setText("Delete");
        deleteCols2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCols2ActionPerformed(evt);
            }
        });

        columns3.setVisible(false);
        columns3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        columns3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columns3ActionPerformed(evt);
            }
        });

        deleteCols4.setVisible(false);
        deleteCols4.setText("Delete");
        deleteCols4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCols4ActionPerformed(evt);
            }
        });

        columns4.setVisible(false);
        columns4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        columns4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columns4ActionPerformed(evt);
            }
        });

        deleteCols3.setVisible(false);
        deleteCols3.setText("Delete");
        deleteCols3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCols3ActionPerformed(evt);
            }
        });

        columns5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        columns5.setVisible(false);
        columns5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columns5ActionPerformed(evt);
            }
        });

        deleteCols6.setVisible(false);
        deleteCols6.setText("Delete");
        deleteCols6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCols6ActionPerformed(evt);
            }
        });

        columns6.setVisible(false);
        columns6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        columns6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columns6ActionPerformed(evt);
            }
        });

        deleteCols5.setVisible(false);
        deleteCols5.setText("Delete");
        deleteCols5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCols5ActionPerformed(evt);
            }
        });

        relation1.setVisible(false);
        relation1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));

        key1.setVisible(false);
        key1.setText("");

        relation2.setVisible(false);
        relation2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));

        relation3.setVisible(false);
        relation3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));

        relation4.setVisible(false);
        relation4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));

        relation5.setVisible(false);
        relation5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));

        relation6.setVisible(false);
        relation6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", "<", ">", "<=", ">=" }));

        key2.setVisible(false);
        key2.setText("");

        key3.setVisible(false);
        key3.setText("");

        key4.setVisible(false);
        key4.setText("");

        key5.setVisible(false);
        key5.setText("");

        key6.setVisible(false);
        key6.setText("");

        jButton8.setText("Delete Key");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel3)
                            .addGap(77, 77, 77)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteCols2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(columns1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(columns4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(columns3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(columns2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(columns5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(columns6, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(deleteCols3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCols4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCols5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCols6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(relation1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(key1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(relation2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(key2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(relation3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(key3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(relation4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(key4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(relation5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(key5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(relation6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(key6, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columns1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relation1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(columns2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(relation2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(key2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCols2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columns3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relation3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCols3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columns4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relation4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCols4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columns5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relation5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCols5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(columns6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relation6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(key6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCols6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jButton4))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Sort by:");

        sort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "", "", "", "", "", }));

        jLabel5.setText("Entries:");

        jLabel6.setText("Output:");

        Entries.setText("10");

        outputType.add(window);
        window.setText("Window");

        outputType.add(textFile);
        textFile.setText("Text File");

        sortBy.add(ascending);
        ascending.setText("Ascending");

        sortBy.add(descending);
        descending.setText("Descending");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sort, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(Entries, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(window)
                            .addComponent(textFile)
                            .addComponent(ascending)
                            .addComponent(descending)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ascending)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descending)
                .addGap(4, 4, 4)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Entries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(window)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFile)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        search1.setText("Search");
        search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search1ActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("Question 1:");

        jLabel8.setText("Restaurant 1:");

        jLabel9.setText("Restaurant 2:");

        search2.setText("Search");
        search2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search2ActionPerformed(evt);
            }
        });

        jLabel10.setText("City 1:");

        jLabel11.setText("City 2:");

        jLabel12.setText("State 1:");

        jLabel13.setText("State 2:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(search2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel7))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel12))
                                .addGap(38, 38, 38)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(City1)
                                    .addComponent(State1)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Rest1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Rest2, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(City2)
                            .addComponent(State2))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(Rest1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(Rest2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(City2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(City1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(State2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(jLabel13)
                        .addComponent(State1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(search2)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        QuestionNums.add(question2);
        question2.setSelected(true);
        question2.setText("Question 2");
        question2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question2ActionPerformed(evt);
            }
        });

        QuestionNums.add(question3);
        question3.setText("Question 3");
        question3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question3ActionPerformed(evt);
            }
        });

        QuestionNums.add(question4);
        question4.setText("Question 4");
        question4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                question4ActionPerformed(evt);
            }
        });

        searchTerm1.setText("");

        search3.setText("Search");
        search3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search3ActionPerformed(evt);
            }
        });

        prompting1.setText("Enter a User:");
        prompting1.setToolTipText("");

        searchTerm2.setVisible(false);
        searchTerm2.setText("");

        prompting2.setVisible(false);
        prompting2.setText("Enter a State:");
        prompting2.setToolTipText("");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(question4)
                    .addComponent(question3)
                    .addComponent(question2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(search3, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                    .addComponent(searchTerm1)
                    .addComponent(searchTerm2)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prompting1)
                            .addComponent(prompting2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(question2)
                    .addComponent(prompting1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question3)
                    .addComponent(searchTerm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(question4)
                    .addComponent(prompting2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchTerm2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(search3)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(search1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(search1))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel14.setText("Output:");

        jLabel15.setText("Output info here");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableAdded(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableAdded
        // 4 total tables
        if(tableCounter == 1){
            Table2.setVisible(true);
            deleteTable2.setVisible(true);
            tableCounter += 1;
        }else if(tableCounter == 2){
            Table3.setVisible(true);
            deleteTable3.setVisible(true);
            tableCounter +=1;
        }else if(tableCounter == 3){
            Table4.setVisible(true);
            deleteTable4.setVisible(true);
            tableCounter +=1;
        }
        else if(!Table2.isVisible()){
            tableCounter +=1;
            Table2.setVisible(true);
            deleteTable2.setVisible(true);
        }else if(!Table3.isVisible()){
            tableCounter +=1;
            Table3.setVisible(true);
            deleteTable3.setVisible(true);
        }else if(!Table4.isVisible()){
            tableCounter +=1;
            Table4.setVisible(true);
            deleteTable4.setVisible(true);
        }
        
    }//GEN-LAST:event_tableAdded

    private void deleteTable2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTable2ActionPerformed
       if(Table2.getSelectedItem().toString() == "Businesses"){
           for(int i = 0; i < businessCols.length; i++){
               columns1.removeItem(businessCols[i]);
               columns2.removeItem(businessCols[i]);
               columns3.removeItem(businessCols[i]);
               columns4.removeItem(businessCols[i]);
               columns5.removeItem(businessCols[i]);
               columns6.removeItem(businessCols[i]);
           }
       }else if(Table2.getSelectedItem().toString() == "Categories"){
           for(int i = 0; i < categoriesCols.length; i++){
               columns1.removeItem(categoriesCols[i]);
               columns2.removeItem(categoriesCols[i]);
               columns3.removeItem(categoriesCols[i]);
               columns4.removeItem(categoriesCols[i]);
               columns5.removeItem(categoriesCols[i]);
               columns6.removeItem(categoriesCols[i]);
           }
       }else if(Table2.getSelectedItem().toString() == "Reviews"){
           for(int i = 0; i < reviewsCols.length; i++){
               columns1.removeItem(reviewsCols[i]);
               columns2.removeItem(reviewsCols[i]);
               columns3.removeItem(reviewsCols[i]);
               columns4.removeItem(reviewsCols[i]);
               columns5.removeItem(reviewsCols[i]);
               columns6.removeItem(reviewsCols[i]);
           }
       }else if(Table2.getSelectedItem().toString() == "EliteHistory"){
           for(int i = 0; i < eliteCols.length; i++){
               columns1.removeItem(eliteCols[i]);
               columns2.removeItem(eliteCols[i]);
               columns3.removeItem(eliteCols[i]);
               columns4.removeItem(eliteCols[i]);
               columns5.removeItem(eliteCols[i]);
               columns6.removeItem(eliteCols[i]);
           }
       }else if(Table2.getSelectedItem().toString() == "Locations"){
           for(int i = 0; i < locationsCols.length; i++){
               columns1.removeItem(locationsCols[i]);
               columns2.removeItem(locationsCols[i]);
               columns3.removeItem(locationsCols[i]);
               columns4.removeItem(locationsCols[i]);
               columns5.removeItem(locationsCols[i]);
               columns6.removeItem(locationsCols[i]);
           }
       }else if(Table2.getSelectedItem().toString() == "Tips"){
           for(int i = 0; i < tipsCols.length; i++){
               columns1.removeItem(tipsCols[i]);
               columns2.removeItem(tipsCols[i]);
               columns3.removeItem(tipsCols[i]);
               columns4.removeItem(tipsCols[i]);
               columns5.removeItem(tipsCols[i]);
               columns6.removeItem(tipsCols[i]);
           }
       }else if(Table2.getSelectedItem().toString() == "Users"){
           for(int i = 0; i < usersCols.length; i++){
               columns1.removeItem(usersCols[i]);
               columns2.removeItem(usersCols[i]);
               columns3.removeItem(usersCols[i]);
               columns4.removeItem(usersCols[i]);
               columns5.removeItem(usersCols[i]);
               columns6.removeItem(usersCols[i]);
           }
       }
        Table2.setVisible(false);
        deleteTable2.setVisible(false);
        tableCounter -= 1;
           
    }//GEN-LAST:event_deleteTable2ActionPerformed

    private void deleteTable3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTable3ActionPerformed
        if(Table3.getSelectedItem().toString() == "Businesses"){
           for(int i = 0; i < businessCols.length; i++){
               columns1.removeItem(businessCols[i]);
               columns2.removeItem(businessCols[i]);
               columns3.removeItem(businessCols[i]);
               columns4.removeItem(businessCols[i]);
               columns5.removeItem(businessCols[i]);
               columns6.removeItem(businessCols[i]);
           }
       }else if(Table3.getSelectedItem().toString() == "Categories"){
           for(int i = 0; i < categoriesCols.length; i++){
               columns1.removeItem(categoriesCols[i]);
               columns2.removeItem(categoriesCols[i]);
               columns3.removeItem(categoriesCols[i]);
               columns4.removeItem(categoriesCols[i]);
               columns5.removeItem(categoriesCols[i]);
               columns6.removeItem(categoriesCols[i]);
           }
       }else if(Table3.getSelectedItem().toString() == "Reviews"){
           for(int i = 0; i < reviewsCols.length; i++){
               columns1.removeItem(reviewsCols[i]);
               columns2.removeItem(reviewsCols[i]);
               columns3.removeItem(reviewsCols[i]);
               columns4.removeItem(reviewsCols[i]);
               columns5.removeItem(reviewsCols[i]);
               columns6.removeItem(reviewsCols[i]);
           }
       }else if(Table3.getSelectedItem().toString() == "EliteHistory"){
           for(int i = 0; i < eliteCols.length; i++){
               columns1.removeItem(eliteCols[i]);
               columns2.removeItem(eliteCols[i]);
               columns3.removeItem(eliteCols[i]);
               columns4.removeItem(eliteCols[i]);
               columns5.removeItem(eliteCols[i]);
               columns6.removeItem(eliteCols[i]);
           }
       }else if(Table3.getSelectedItem().toString() == "Locations"){
           for(int i = 0; i < locationsCols.length; i++){
               columns1.removeItem(locationsCols[i]);
               columns2.removeItem(locationsCols[i]);
               columns3.removeItem(locationsCols[i]);
               columns4.removeItem(locationsCols[i]);
               columns5.removeItem(locationsCols[i]);
               columns6.removeItem(locationsCols[i]);
           }
       }else if(Table3.getSelectedItem().toString() == "Tips"){
           for(int i = 0; i < tipsCols.length; i++){
               columns1.removeItem(tipsCols[i]);
               columns2.removeItem(tipsCols[i]);
               columns3.removeItem(tipsCols[i]);
               columns4.removeItem(tipsCols[i]);
               columns5.removeItem(tipsCols[i]);
               columns6.removeItem(tipsCols[i]);
           }
       }else if(Table3.getSelectedItem().toString() == "Users"){
           for(int i = 0; i < usersCols.length; i++){
               columns1.removeItem(usersCols[i]);
               columns2.removeItem(usersCols[i]);
               columns3.removeItem(usersCols[i]);
               columns4.removeItem(usersCols[i]);
               columns5.removeItem(usersCols[i]);
               columns6.removeItem(usersCols[i]);
           }
       }
        Table3.setVisible(false);
        deleteTable3.setVisible(false);
        tableCounter -= 1;
    }//GEN-LAST:event_deleteTable3ActionPerformed

    private void deleteTable4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTable4ActionPerformed
        if(Table4.getSelectedItem().toString() == "Businesses"){
           for(int i = 0; i < businessCols.length; i++){
               columns1.removeItem(businessCols[i]);
               columns2.removeItem(businessCols[i]);
               columns3.removeItem(businessCols[i]);
               columns4.removeItem(businessCols[i]);
               columns5.removeItem(businessCols[i]);
               columns6.removeItem(businessCols[i]);
           }
       }else if(Table4.getSelectedItem().toString() == "Categories"){
           for(int i = 0; i < categoriesCols.length; i++){
               columns1.removeItem(categoriesCols[i]);
               columns2.removeItem(categoriesCols[i]);
               columns3.removeItem(categoriesCols[i]);
               columns4.removeItem(categoriesCols[i]);
               columns5.removeItem(categoriesCols[i]);
               columns6.removeItem(categoriesCols[i]);
           }
       }else if(Table4.getSelectedItem().toString() == "Reviews"){
           for(int i = 0; i < reviewsCols.length; i++){
               columns1.removeItem(reviewsCols[i]);
               columns2.removeItem(reviewsCols[i]);
               columns3.removeItem(reviewsCols[i]);
               columns4.removeItem(reviewsCols[i]);
               columns5.removeItem(reviewsCols[i]);
               columns6.removeItem(reviewsCols[i]);
           }
       }else if(Table4.getSelectedItem().toString() == "EliteHistory"){
           for(int i = 0; i < eliteCols.length; i++){
               columns1.removeItem(eliteCols[i]);
               columns2.removeItem(eliteCols[i]);
               columns3.removeItem(eliteCols[i]);
               columns4.removeItem(eliteCols[i]);
               columns5.removeItem(eliteCols[i]);
               columns6.removeItem(eliteCols[i]);
           }
       }else if(Table4.getSelectedItem().toString() == "Locations"){
           for(int i = 0; i < locationsCols.length; i++){
               columns1.removeItem(locationsCols[i]);
               columns2.removeItem(locationsCols[i]);
               columns3.removeItem(locationsCols[i]);
               columns4.removeItem(locationsCols[i]);
               columns5.removeItem(locationsCols[i]);
               columns6.removeItem(locationsCols[i]);
           }
       }else if(Table4.getSelectedItem().toString() == "Tips"){
           for(int i = 0; i < tipsCols.length; i++){
               columns1.removeItem(tipsCols[i]);
               columns2.removeItem(tipsCols[i]);
               columns3.removeItem(tipsCols[i]);
               columns4.removeItem(tipsCols[i]);
               columns5.removeItem(tipsCols[i]);
               columns6.removeItem(tipsCols[i]);
           }
       }else if(Table4.getSelectedItem().toString() == "Users"){
           for(int i = 0; i < usersCols.length; i++){
               columns1.removeItem(usersCols[i]);
               columns2.removeItem(usersCols[i]);
               columns3.removeItem(usersCols[i]);
               columns4.removeItem(usersCols[i]);
               columns5.removeItem(usersCols[i]);
               columns6.removeItem(usersCols[i]);
           }
       }
        Table4.setVisible(false);
        deleteTable4.setVisible(false);
        tableCounter -= 1;
    }//GEN-LAST:event_deleteTable4ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(colCounter == 1){
            colCounter +=1;
            columns2.setVisible(true);
            deleteCols2.setVisible(true);
        }else if(colCounter == 2){
            colCounter +=1;
            columns3.setVisible(true);
            deleteCols3.setVisible(true);
        }else if(colCounter == 3){
            colCounter +=1;
            columns4.setVisible(true);
            deleteCols4.setVisible(true);
        }else if(colCounter == 4){
            colCounter +=1;
            columns5.setVisible(true);
            deleteCols5.setVisible(true);
        }else if(colCounter == 5){
            colCounter +=1;
            columns6.setVisible(true);
            deleteCols6.setVisible(true);
        }else if(!columns2.isVisible()){
            colCounter +=1;
            columns2.setVisible(true);
            deleteCols2.setVisible(true);
        }else if(!columns3.isVisible()){
            colCounter +=1;
            columns3.setVisible(true);
            deleteCols3.setVisible(true);
        }else if(!columns4.isVisible()){
            colCounter +=1;
            columns4.setVisible(true);
            deleteCols4.setVisible(true);
        }else if(!columns5.isVisible()){
            colCounter +=1;
            columns5.setVisible(true);
            deleteCols5.setVisible(true);
        }else if(!columns6.isVisible()){
            colCounter +=1;
            columns6.setVisible(true);
            deleteCols6.setVisible(true);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void deleteCols2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCols2ActionPerformed
        sort.removeItemAt(1);
        sort.insertItemAt("", 1);
        if(columns2.isVisible() == true){
            columns2.setVisible(false);
            deleteCols2.setVisible(false);
            colCounter -=1;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteCols2ActionPerformed

    private void deleteCols3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCols3ActionPerformed
        sort.removeItemAt(2);
        sort.insertItemAt("", 2);
        if(columns3.isVisible() == true){
            columns3.setVisible(false);
            deleteCols3.setVisible(false);
            colCounter -=1;
        }
    }//GEN-LAST:event_deleteCols3ActionPerformed

    private void deleteCols4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCols4ActionPerformed
        
        sort.removeItemAt(3);
        sort.insertItemAt("", 3);
        if(columns4.isVisible() == true){
            columns4.setVisible(false);
            deleteCols4.setVisible(false);
            colCounter -=1;
        }
    }//GEN-LAST:event_deleteCols4ActionPerformed

    private void deleteCols5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCols5ActionPerformed
        sort.removeItemAt(4);
        sort.insertItemAt("", 4);
        if(columns5.isVisible() == true){
            columns5.setVisible(false);
            deleteCols5.setVisible(false);
            colCounter -=1;
        }
    }//GEN-LAST:event_deleteCols5ActionPerformed

    private void deleteCols6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCols6ActionPerformed
        sort.removeItemAt(5);
        sort.insertItemAt("", 5);
        if(columns6.isVisible() == true){
            columns6.setVisible(false);
            deleteCols6.setVisible(false);
            colCounter -=1;
        }
    }//GEN-LAST:event_deleteCols6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(keyCounter == 0){
            relation1.setVisible(true);
            key1.setVisible(true);
            keyCounter +=1;
        }else if(keyCounter == 1){
            relation2.setVisible(true);
            key2.setVisible(true);
            keyCounter +=1;
        }else if(keyCounter == 2){
            relation3.setVisible(true);
            key3.setVisible(true);
            keyCounter +=1;
        }else if(keyCounter == 3){
            relation4.setVisible(true);
            key4.setVisible(true);
            keyCounter +=1;
        }else if(keyCounter == 4){
            relation5.setVisible(true);
            key5.setVisible(true);
            keyCounter +=1;
        }else if(keyCounter == 5){
            relation6.setVisible(true);
            key6.setVisible(true);
            keyCounter +=1;
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
    if(keyCounter == 1){
        relation1.setVisible(false);
        key1.setVisible(false);
        keyCounter -= 1;
    }else if(keyCounter == 2){
        relation2.setVisible(false);
        key2.setVisible(false);
        keyCounter -= 1;
    }else if(keyCounter == 3){
        relation3.setVisible(false);
        key3.setVisible(false);
        keyCounter -= 1;
    }else if(keyCounter == 4){
        relation4.setVisible(false);
        key4.setVisible(false);
        keyCounter -= 1;
    }else if(keyCounter == 5){
        relation5.setVisible(false);
        key5.setVisible(false);
        keyCounter -= 1;
    }else if(keyCounter == 6){
        relation6.setVisible(false);
        key6.setVisible(false);
        keyCounter -= 1;
    }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search1ActionPerformed
        String table1 = Table1.getSelectedItem().toString();
        String table2 = Table2.getSelectedItem().toString();
        String table3 = Table3.getSelectedItem().toString();
        String table4 = Table4.getSelectedItem().toString();

        String[] tables = new String[tableCounter];
        if (tableCounter >= 1) {
            tables[0] = table1;
        }
        if (tableCounter >= 2) {
            tables[1] = table2;
        }
        if (tableCounter >= 3) {
            tables[2] = table3;
        }
        if (tableCounter >= 4) {
            tables[3] = table4;
        }

        String col1 = columns1.getSelectedItem().toString();
        String col2 = columns2.getSelectedItem().toString();
        String col3 = columns3.getSelectedItem().toString();
        String col4 = columns4.getSelectedItem().toString();
        String col5 = columns5.getSelectedItem().toString();
        String col6 = columns6.getSelectedItem().toString();

        String[] columns = new String[colCounter];
        if (colCounter >= 1) {
            columns[0] = col1;
        }
        if (colCounter >= 2) {
            columns[1] = col2;
        }
        if (colCounter >= 3) {
            columns[2] = col3;
        }
        if (colCounter >= 4) {
            columns[3] = col4;
        }
        if (colCounter >= 5) {
            columns[4] = col5;
        }
        if (colCounter >= 6) {
            columns[5] = col6;
        }

        String relation_1 = relation1.getSelectedItem().toString();
        String relation_2 = relation2.getSelectedItem().toString();
        String relation_3 = relation3.getSelectedItem().toString();
        String relation_4 = relation4.getSelectedItem().toString();
        String relation_5 = relation5.getSelectedItem().toString();
        String relation_6 = relation6.getSelectedItem().toString();

        String key_1 = key1.getText();
        String key_2 = key2.getText();
        String key_3 = key3.getText();
        String key_4 = key4.getText();
        String key_5 = key5.getText();
        String key_6 = key6.getText();

        int[] cols = new int[keyCounter];
        String[] relations = new String[keyCounter];
        String[] keys = new String[keyCounter];

        if (keyCounter >= 1) {
            cols[0] = 0;
            relations[0] = relation_1;
            keys[0] = key_1;
        }
        if (keyCounter >= 2) {
            cols[1] = 1;
            relations[1] = relation_2;
            keys[1] = key_2;
        }
        if (keyCounter >= 3) {
            cols[2] = 2;
            relations[2] = relation_3;
            keys[2] = key_3;
        }
        if (keyCounter >= 4) {
            cols[3] = 3;
            relations[3] = relation_4;
            keys[3] = key_4;
        }
        if (keyCounter >= 5) {
            cols[4] = 4;
            relations[4] = relation_5;
            keys[4] = key_5;
        }
        if (keyCounter >= 6) {
            cols[5] = 5;
            relations[5] = relation_6;
            keys[5] = key_6;
        }

        String sortBy = sort.getSelectedItem().toString();
        int orderCol = -1;
        for (int i = 0; i < colCounter; i++) {
            if (sortBy.equals(columns[i])) {
                orderCol = i;
                break;
            }
        }

        String orderType = null;
        if(ascending.isSelected()){
            orderType = "asc";
        }else if(descending.isSelected()){
            orderType = "desc";
        }

        int entriesLimit = Integer.parseInt(Entries.getText());
        
        String outputType = null;
        if(window.isSelected()){
            outputType = "";
        }else if(textFile.isSelected()){
            outputType = "./Data/databaseQueryOutput.csv";
        }

        JDBCQuery query = new JDBCQuery();
        query.columns = columns;
        query.tables = tables;
        query.matchCols = cols;
        query.relation = relations;
        query.matchTo = keys;
        query.orderCol = orderCol;
        query.order = orderType;
        query.limit = entriesLimit;
        
        JDBCBackend back = null;
        try {
            back = new JDBCBackend();
        }
        catch (SQLException ex) {
            jLabel15.setText("Unable to establish connection");
        }
        
        if (back != null) {
            try {
                back.executeQuery(query);
                jLabel15.setText(back.getOutput(outputType));
            }
            catch (SQLException ex) {
                jLabel15.setText("Unable to execute query");
            }
            catch (InputException|IOException ex) {
                jLabel15.setText(ex.getMessage());
            }

            try {
                back.close();
            }
            catch (SQLException ex) {
                jLabel15.setText("Connection closure not clean");
            }
        }
    }//GEN-LAST:event_search1ActionPerformed

    private void columns1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_columns1ItemStateChanged
        sort.removeItemAt(0);
        sort.insertItemAt(columns1.getSelectedItem().toString(), 0);
        
    }//GEN-LAST:event_columns1ItemStateChanged

    private void columns2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columns2ActionPerformed
        if(columns2.isVisible()){
            sort.removeItemAt(1);
            sort.insertItemAt(columns2.getSelectedItem().toString(), 1);
        }
        
    }//GEN-LAST:event_columns2ActionPerformed

    private void columns3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columns3ActionPerformed
        if(columns3.isVisible()){
            sort.removeItemAt(2);
            sort.insertItemAt(columns3.getSelectedItem().toString(), 2);
        }
        
    }//GEN-LAST:event_columns3ActionPerformed

    private void columns4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columns4ActionPerformed
        if(columns4.isVisible()){
            sort.removeItemAt(3);
            sort.insertItemAt(columns4.getSelectedItem().toString(), 3);
        }
        
    }//GEN-LAST:event_columns4ActionPerformed

    private void columns5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columns5ActionPerformed
        if(columns5.isVisible()){
            sort.removeItemAt(4);
            sort.insertItemAt(columns5.getSelectedItem().toString(), 4);
        }
    }//GEN-LAST:event_columns5ActionPerformed

    private void columns6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columns6ActionPerformed
        if(columns6.isVisible()){
            sort.removeItemAt(5);
            sort.insertItemAt(columns6.getSelectedItem().toString(), 5);  
        }
              // TODO add your handling code here:
    }//GEN-LAST:event_columns6ActionPerformed

    private void search3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search3ActionPerformed
        boolean is2 = false;
        boolean is3 = false;
        boolean is4 = false;
        String questionQuery = searchTerm1.getText();
        String placeQuery = "";
        if(question2.isSelected()){
            is2 = true;
        }else if(question3.isSelected()){
            is3 = true;
        }else if(question4.isSelected()){
            is4 = true;
            placeQuery = searchTerm2.getText();
        }

        JDBCBackend back = null;
        try {
            back = new JDBCBackend();
        }
        catch (SQLException ex) {
            jLabel15.setText("Unable to establish connection");
        }
        
        if (back != null) {
            try {
                if (is2) {
                    back.executeExactQuery(("SELECT rev_rating, rev_text, rev_complimentsrecv FROM reviews WHERE usr_id = \'" + questionQuery + "\'"));
                    jLabel15.setText(back.getOutput(""));
                }
                if (is3) {
                    back.executeExactQuery(("SELECT bus_name AS name FROM businesses JOIN categories ON businesses.cat_id = categories.cat_id JOIN locations ON businesses.loc_id = locations.loc_id WHERE bus_rating >= \'3.5\' AND cat_name LIKE \'%Restaurants%\' AND loc_state = \'" + questionQuery.toUpperCase() + "\' GROUP BY bus_name HAVING COUNT(*) > 1"));
                    back.getOutput("./Data/franchise_names.csv");
                    
                    StringBuilder namesList = new StringBuilder("(");
                    try (BufferedReader reader = new BufferedReader(new FileReader("./Data/franchise_names.csv"))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            if (!line.equals("name")) {
                                StringBuilder l = new StringBuilder();
                                int index = 0;
                                while (line.indexOf("\'" , index) != -1) {
                                    int qin = line.indexOf("\'" , index);
                                    l.append(line.substring(index, qin) + "\'\'");
                                    index = qin + 1;
                                }
                                l.append(line.substring(index));
                                line = l.toString();

                                namesList.append("\'" + line + "\', ");
                            }
                        }
                    }

                    if (namesList.toString().equals("(")) {
                        jLabel15.setText("No franchises in state selected (in this DBMS)");
                    }
                    else {
                        String names = namesList.toString().substring(0, namesList.length()-2) + ")";
                        back.executeExactQuery("SELECT bus_name, bus_rating, loc_latitude, loc_longitude FROM businesses JOIN locations ON businesses.loc_id = locations.loc_id WHERE bus_rating >= '3.5' AND bus_name IN " + names + " AND loc_state = \'" + questionQuery.toUpperCase() + "\'");
                        ConvexHull hull = new ConvexHull(back.getOutput("./Data/locations.csv"));
                        hull.convexHull();
                        jLabel15.setText(hull.toHullString());
                    }
                }
                if (is4) {
                    back.executeExact("CREATE TEMPORARY VIEW unique_bus_name AS SELECT bus_name AS name, MAX(businesses.bus_id) AS id, MAX(cat_name) AS cat, MAX(loc_city) AS city, MAX(loc_state) as state FROM businesses JOIN categories ON businesses.cat_id = categories.cat_id JOIN locations ON businesses.loc_id = locations.loc_id GROUP BY bus_name HAVING COUNT(*) = 1");
                    back.executeExactQuery(("SELECT MAX(name) AS name, COUNT(tips.bus_id) AS tip_count FROM unique_bus_name JOIN tips ON unique_bus_name.id = tips.bus_id WHERE city = \'" + questionQuery + "\' AND state = \'" + placeQuery.toUpperCase() + "\' AND cat LIKE \'%Restaurants%\' GROUP BY tips.bus_id ORDER BY tip_count DESC LIMIT 1"));
                    jLabel15.setText(back.getOutput(""));
                    back.executeExact("DROP VIEW unique_bus_name");
                }
            }
            catch (SQLException ex) {
                jLabel15.setText("Unable to execute query");
            }
            catch (IOException ex) {
                jLabel15.setText(ex.getMessage());
            }

            try {
                back.close();
            }
            catch (SQLException ex) {
                jLabel15.setText("Connection closure not clean");
            }
        }
        // this has the text in the textbox and which question it is. 
    }//GEN-LAST:event_search3ActionPerformed

    private void question2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question2ActionPerformed
        if(question2.isSelected()){
            prompting1.setText("Enter a User:");
        }   prompting2.setVisible(false);
            searchTerm2.setVisible(false);
        
    }//GEN-LAST:event_question2ActionPerformed

    private void question3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question3ActionPerformed
        if(question3.isSelected()){
            prompting1.setText("Enter a US State:");
            prompting2.setVisible(false);
            searchTerm2.setVisible(false);
        }
    }//GEN-LAST:event_question3ActionPerformed

    private void question4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_question4ActionPerformed
        if(question4.isSelected()){
            prompting1.setText("Enter a City:");
            prompting2.setVisible(true);
            searchTerm2.setVisible(true);
        }
    }//GEN-LAST:event_question4ActionPerformed

    private HashMap<String, ArrayList<Node>> busUsers;
    private void buildNetwork(String res1, String res2, String city1, String city2, String st1, String st2) {
        JDBCBackend back = null;
        try {
            back = new JDBCBackend();
        }
        catch (SQLException ex) {
            jLabel15.setText("Unable to establish connection");
        }
        
        if (back != null) {
            try {
                back.executeExactQuery("SELECT users.usr_id, businesses.bus_id FROM reviews JOIN users ON reviews.usr_id = users.usr_id JOIN businesses ON reviews.bus_id = businesses.bus_ID JOIN locations ON businesses.loc_id = locations.loc_id WHERE (usr_reviewcount > \'0\' AND bus_reviewcount > \'0\' AND rev_rating > \'3\') AND (bus_name = \'" + res1 + "\' AND loc_city = \'" + city1 + "\' AND loc_state = \'" + st1.toUpperCase() + "\') OR (bus_name = \'" + res2 + "\' AND loc_city = \'" + city2 + "\' AND loc_state = \'" + st2.toUpperCase() + "\')");
                back.getOutput("./Data/pairs.csv");
                busUsers = new HashMap<>();
                try (BufferedReader reader = new BufferedReader(new FileReader("./Data/pairs.csv"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        if (!line.equals("usr_id,bus_id")) {
                            String[] pair = line.split(",");
                            String user = pair[0];
                            String business = pair[1];

                            Node n = new Node(user);
                            ArrayList<Node> value;
                            if (busUsers.containsKey(business) && !busUsers.get(business).contains(n)) {
                                value = busUsers.get(business);
                                for (Node no : value) {
                                    no.addAdjacent(n);
                                    n.addAdjacent(no);
                                }
                                value.add(n);
                            }
                            else if (!busUsers.containsKey(business)) {
                                value = new ArrayList<>();
                                value.add(n);
                                busUsers.put(business, value);
                            }
                        }
                    }
                }
            }
            catch (SQLException ex) {
                jLabel15.setText("Unable to execute query");
            }
            catch (IOException ex) {
                jLabel15.setText(ex.getMessage());
            }

            try {
                back.close();
            }
            catch (SQLException ex) {
                jLabel15.setText("Connection closure not clean");
            }
        }
    }

    private void search2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search2ActionPerformed
        String restaurant1 = Rest1.getText();
        String restaurant2 = Rest2.getText();
        String city1 = City1.getText();
        String city2 = City2.getText();
        String state1 = State1.getText();
        String state2 = State2.getText();

        JDBCBackend back = null;
        try {
            back = new JDBCBackend();
        }
        catch (SQLException ex) {
            jLabel15.setText("Unable to establish connection");
        }
        
        if (back != null) {
            try {
                buildNetwork(restaurant1, restaurant2, city1, city2, state1, state2);

                back.executeExactQuery("SELECT bus_name, bus_id FROM businesses JOIN locations ON businesses.loc_id = locations.loc_id WHERE (bus_name = \'" + restaurant1 + "\' AND loc_city = \'" + city1 + "\' AND loc_state = \'" + state1.toUpperCase() + "\') OR (bus_name = \'" + restaurant2 + "\' AND loc_city = \'" + city2 + "\' AND loc_state = \'" + state2.toUpperCase() + "\')");
                back.getOutput("./Data/businesses.csv");

                String startID = "";
                String endID = "";
                try (BufferedReader reader = new BufferedReader(new FileReader("./Data/businesses.csv"))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        if (!line.equals("bus_name,bus_id")) {
                            String[] values = line.split(",");
                            String name = values[0];
                            String id = values[1];
                            if (name.equals(restaurant1)) {
                                startID = id;
                            }
                            else {
                                endID = id;
                            }
                        }
                    }
                }

                Queue<ArrayList<Node>> q = new LinkedList<>();
                ArrayList<Node> visited = new ArrayList<>();

                ArrayList<Node> path = null;
                for (Node n : busUsers.get(startID)) {
                    path = new ArrayList<>();
                    path.add(n);
                    q.offer(path);
                }

                boolean pathFound = false;
                while (!q.isEmpty() && !pathFound) {
                    path = q.poll();
                    Node n = path.get(path.size() - 1);
                    for (Node adj : n.getAdjacents()) {
                        if (!visited.contains(adj)) {
                            visited.add(adj);
                            ArrayList<Node> pathToNextNode = new ArrayList<>(path);
                            pathToNextNode.add(adj);
                            for (Node e : busUsers.get(endID)) {
                                if (adj.equals(e)) {
                                    pathFound = true;
                                    break;
                                }
                            }
                            q.offer(pathToNextNode);
                        }
                        if (pathFound) {
                            break;
                        }
                    }
                }

                if (!pathFound || path == null) {
                    jLabel15.setText("No chain between the restaurants");
                }
                else {
                    jLabel15.setText(path.toString());
                }
            }
            catch (SQLException ex) {
                jLabel15.setText("Unable to execute query");
            }
            catch (IOException ex) {
                jLabel15.setText(ex.getMessage());
            }

            try {
                back.close();
            }
            catch (SQLException ex) {
                jLabel15.setText("Connection closure not clean");
            }
        }
        // We now have the 2 text fields.
    }//GEN-LAST:event_search2ActionPerformed

    private void Table1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Table1ActionPerformed
         if(Table1.getSelectedItem() == "Businesses"){ 
            for(int i = 0;i < businessCols.length; i++){
                columns1.addItem(businessCols[i]);
                columns2.addItem(businessCols[i]);
                columns3.addItem(businessCols[i]);
                columns4.addItem(businessCols[i]);
                columns5.addItem(businessCols[i]);
                columns6.addItem(businessCols[i]);
            }
        }else if(Table1.getSelectedItem() == "Reviews"){
            for(int i = 0;i < reviewsCols.length; i++){
                columns1.addItem(reviewsCols[i]);
                columns2.addItem(reviewsCols[i]);
                columns3.addItem(reviewsCols[i]);
                columns4.addItem(reviewsCols[i]);
                columns5.addItem(reviewsCols[i]);
                columns6.addItem(reviewsCols[i]);
            }
        }else if(Table1.getSelectedItem() == "Categories"){
            for(int i = 0;i < categoriesCols.length; i++){
                columns1.addItem(categoriesCols[i]);
                columns2.addItem(categoriesCols[i]);
                columns3.addItem(categoriesCols[i]);
                columns4.addItem(categoriesCols[i]);
                columns5.addItem(categoriesCols[i]);
                columns6.addItem(categoriesCols[i]);
            }
        }else if(Table1.getSelectedItem() == "EliteHistory"){
            for(int i = 0;i < eliteCols.length; i++){
                columns1.addItem(eliteCols[i]);
                columns2.addItem(eliteCols[i]);
                columns3.addItem(eliteCols[i]);
                columns4.addItem(eliteCols[i]);
                columns5.addItem(eliteCols[i]);
                columns6.addItem(eliteCols[i]);
            }
        }else if(Table1.getSelectedItem() == "Locations"){
            for(int i = 0;i < locationsCols.length; i++){
                columns1.addItem(locationsCols[i]);
                columns2.addItem(locationsCols[i]);
                columns3.addItem(locationsCols[i]);
                columns4.addItem(locationsCols[i]);
                columns5.addItem(locationsCols[i]);
                columns6.addItem(locationsCols[i]);
            }
        }else if(Table1.getSelectedItem() == "Tips"){
            for(int i = 0;i < tipsCols.length; i++){
                columns1.addItem(tipsCols[i]);
                columns2.addItem(tipsCols[i]);
                columns3.addItem(tipsCols[i]);
                columns4.addItem(tipsCols[i]);
                columns5.addItem(tipsCols[i]);
                columns6.addItem(tipsCols[i]);
            }
        }else if(Table1.getSelectedItem() == "Users"){
            for(int i = 0;i < usersCols.length; i++){
                columns1.addItem(usersCols[i]);
                columns2.addItem(usersCols[i]);
                columns3.addItem(usersCols[i]);
                columns4.addItem(usersCols[i]);
                columns5.addItem(usersCols[i]);
                columns6.addItem(usersCols[i]);
            }
        }
    }//GEN-LAST:event_Table1ActionPerformed

    private void Table2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Table2ActionPerformed
       if(Table2.getSelectedItem() == "Businesses" && Table2.isVisible()){ // should append the values onto the list.
            for(int i = 0;i < businessCols.length; i++){
                columns1.addItem(businessCols[i]);
                columns2.addItem(businessCols[i]);
                columns3.addItem(businessCols[i]);
                columns4.addItem(businessCols[i]);
                columns5.addItem(businessCols[i]);
                columns6.addItem(businessCols[i]);
            }
        }else if(Table2.getSelectedItem() == "Reviews"&& Table2.isVisible()){
            for(int i = 0;i < reviewsCols.length; i++){
                columns1.addItem(reviewsCols[i]);
                columns2.addItem(reviewsCols[i]);
                columns3.addItem(reviewsCols[i]);
                columns4.addItem(reviewsCols[i]);
                columns5.addItem(reviewsCols[i]);
                columns6.addItem(reviewsCols[i]);
            }
        }else if(Table2.getSelectedItem() == "Categories"&& Table2.isVisible()){
            for(int i = 0;i < categoriesCols.length; i++){
                columns1.addItem(categoriesCols[i]);
                columns2.addItem(categoriesCols[i]);
                columns3.addItem(categoriesCols[i]);
                columns4.addItem(categoriesCols[i]);
                columns5.addItem(categoriesCols[i]);
                columns6.addItem(categoriesCols[i]);
            }
        }else if(Table2.getSelectedItem() == "EliteHistory"&& Table2.isVisible()){
            for(int i = 0;i < eliteCols.length; i++){
                columns1.addItem(eliteCols[i]);
                columns2.addItem(eliteCols[i]);
                columns3.addItem(eliteCols[i]);
                columns4.addItem(eliteCols[i]);
                columns5.addItem(eliteCols[i]);
                columns6.addItem(eliteCols[i]);
            }
        }else if(Table2.getSelectedItem() == "Locations"&& Table2.isVisible()){
            for(int i = 0;i < locationsCols.length; i++){
                columns1.addItem(locationsCols[i]);
                columns2.addItem(locationsCols[i]);
                columns3.addItem(locationsCols[i]);
                columns4.addItem(locationsCols[i]);
                columns5.addItem(locationsCols[i]);
                columns6.addItem(locationsCols[i]);
            }
        }else if(Table2.getSelectedItem() == "Tips"&& Table2.isVisible()){
            for(int i = 0;i < tipsCols.length; i++){
                columns1.addItem(tipsCols[i]);
                columns2.addItem(tipsCols[i]);
                columns3.addItem(tipsCols[i]);
                columns4.addItem(tipsCols[i]);
                columns5.addItem(tipsCols[i]);
                columns6.addItem(tipsCols[i]);
            }
        }else if(Table2.getSelectedItem() == "Users"&& Table2.isVisible()){
            for(int i = 0;i < usersCols.length; i++){
                columns1.addItem(usersCols[i]);
                columns2.addItem(usersCols[i]);
                columns3.addItem(usersCols[i]);
                columns4.addItem(usersCols[i]);
                columns5.addItem(usersCols[i]);
                columns6.addItem(usersCols[i]);
            }
        }
       
       
    }//GEN-LAST:event_Table2ActionPerformed

    private void Table3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Table3ActionPerformed
        if(Table3.getSelectedItem() == "Businesses"&& Table3.isVisible()){ // should append the values onto the list.
            for(int i = 0;i < businessCols.length; i++){
                columns1.addItem(businessCols[i]);
                columns2.addItem(businessCols[i]);
                columns3.addItem(businessCols[i]);
                columns4.addItem(businessCols[i]);
                columns5.addItem(businessCols[i]);
                columns6.addItem(businessCols[i]);
            }
        }else if(Table3.getSelectedItem() == "Reviews"&& Table3.isVisible()){
            for(int i = 0;i < reviewsCols.length; i++){
                columns1.addItem(reviewsCols[i]);
                columns2.addItem(reviewsCols[i]);
                columns3.addItem(reviewsCols[i]);
                columns4.addItem(reviewsCols[i]);
                columns5.addItem(reviewsCols[i]);
                columns6.addItem(reviewsCols[i]);
            }
        }else if(Table3.getSelectedItem() == "Categories"&& Table3.isVisible()){
            for(int i = 0;i < categoriesCols.length; i++){
                columns1.addItem(categoriesCols[i]);
                columns2.addItem(categoriesCols[i]);
                columns3.addItem(categoriesCols[i]);
                columns4.addItem(categoriesCols[i]);
                columns5.addItem(categoriesCols[i]);
                columns6.addItem(categoriesCols[i]);
            }
        }else if(Table3.getSelectedItem() == "EliteHistory" && Table3.isVisible()){
            for(int i = 0;i < eliteCols.length; i++){
                columns1.addItem(eliteCols[i]);
                columns2.addItem(eliteCols[i]);
                columns3.addItem(eliteCols[i]);
                columns4.addItem(eliteCols[i]);
                columns5.addItem(eliteCols[i]);
                columns6.addItem(eliteCols[i]);
            }
        }else if(Table3.getSelectedItem() == "Locations" && Table3.isVisible()){
            for(int i = 0;i < locationsCols.length; i++){
                columns1.addItem(locationsCols[i]);
                columns2.addItem(locationsCols[i]);
                columns3.addItem(locationsCols[i]);
                columns4.addItem(locationsCols[i]);
                columns5.addItem(locationsCols[i]);
                columns6.addItem(locationsCols[i]);
            }
        }else if(Table3.getSelectedItem() == "Tips" && Table3.isVisible()){
            for(int i = 0;i < tipsCols.length; i++){
                columns1.addItem(tipsCols[i]);
                columns2.addItem(tipsCols[i]);
                columns3.addItem(tipsCols[i]);
                columns4.addItem(tipsCols[i]);
                columns5.addItem(tipsCols[i]);
                columns6.addItem(tipsCols[i]);
            }
        }else if(Table3.getSelectedItem() == "Users" && Table3.isVisible()){
            for(int i = 0;i < usersCols.length; i++){
                columns1.addItem(usersCols[i]);
                columns2.addItem(usersCols[i]);
                columns3.addItem(usersCols[i]);
                columns4.addItem(usersCols[i]);
                columns5.addItem(usersCols[i]);
                columns6.addItem(usersCols[i]);
            }
        }
    }//GEN-LAST:event_Table3ActionPerformed

    private void Table4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Table4ActionPerformed
        if(Table4.getSelectedItem() == "Businesses" && Table4.isVisible()){ // should append the values onto the list.
            for(int i = 0;i < businessCols.length; i++){
                columns1.addItem(businessCols[i]);
                columns2.addItem(businessCols[i]);
                columns3.addItem(businessCols[i]);
                columns4.addItem(businessCols[i]);
                columns5.addItem(businessCols[i]);
                columns6.addItem(businessCols[i]);
            }
        }else if(Table4.getSelectedItem() == "Reviews" && Table4.isVisible()){
            for(int i = 0;i < reviewsCols.length; i++){
                columns1.addItem(reviewsCols[i]);
                columns2.addItem(reviewsCols[i]);
                columns3.addItem(reviewsCols[i]);
                columns4.addItem(reviewsCols[i]);
                columns5.addItem(reviewsCols[i]);
                columns6.addItem(reviewsCols[i]);
            }
        }else if(Table4.getSelectedItem() == "Categories" && Table4.isVisible()){
            for(int i = 0;i < categoriesCols.length; i++){
                columns1.addItem(categoriesCols[i]);
                columns2.addItem(categoriesCols[i]);
                columns3.addItem(categoriesCols[i]);
                columns4.addItem(categoriesCols[i]);
                columns5.addItem(categoriesCols[i]);
                columns6.addItem(categoriesCols[i]);
            }
        }else if(Table4.getSelectedItem() == "EliteHistory" && Table4.isVisible()){
            for(int i = 0;i < eliteCols.length; i++){
                columns1.addItem(eliteCols[i]);
                columns2.addItem(eliteCols[i]);
                columns3.addItem(eliteCols[i]);
                columns4.addItem(eliteCols[i]);
                columns5.addItem(eliteCols[i]);
                columns6.addItem(eliteCols[i]);
            }
        }else if(Table4.getSelectedItem() == "Locations" && Table4.isVisible()){
            for(int i = 0;i < locationsCols.length; i++){
                columns1.addItem(locationsCols[i]);
                columns2.addItem(locationsCols[i]);
                columns3.addItem(locationsCols[i]);
                columns4.addItem(locationsCols[i]);
                columns5.addItem(locationsCols[i]);
                columns6.addItem(locationsCols[i]);
            }
        }else if(Table4.getSelectedItem() == "Tips" && Table4.isVisible()){
            for(int i = 0;i < tipsCols.length; i++){
                columns1.addItem(tipsCols[i]);
                columns2.addItem(tipsCols[i]);
                columns3.addItem(tipsCols[i]);
                columns4.addItem(tipsCols[i]);
                columns5.addItem(tipsCols[i]);
                columns6.addItem(tipsCols[i]);
            }
        }else if(Table4.getSelectedItem() == "Users" && Table4.isVisible()){
            for(int i = 0;i < usersCols.length; i++){
                columns1.addItem(usersCols[i]);
                columns2.addItem(usersCols[i]);
                columns3.addItem(usersCols[i]);
                columns4.addItem(usersCols[i]);
                columns5.addItem(usersCols[i]);
                columns6.addItem(usersCols[i]);
            }
        }
    }//GEN-LAST:event_Table4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField City1;
    private javax.swing.JTextField City2;
    private javax.swing.JTextField Entries;
    private javax.swing.ButtonGroup QuestionNums;
    private javax.swing.JTextField Rest1;
    private javax.swing.JTextField Rest2;
    private javax.swing.JTextField State1;
    private javax.swing.JTextField State2;
    private javax.swing.JComboBox<String> Table1;
    private javax.swing.JComboBox<String> Table2;
    private javax.swing.JComboBox<String> Table3;
    private javax.swing.JComboBox<String> Table4;
    private static javax.swing.JButton addTable;
    private javax.swing.JRadioButton ascending;
    private javax.swing.JComboBox<String> columns1;
    private javax.swing.JComboBox<String> columns2;
    private javax.swing.JComboBox<String> columns3;
    private javax.swing.JComboBox<String> columns4;
    private javax.swing.JComboBox<String> columns5;
    private javax.swing.JComboBox<String> columns6;
    private javax.swing.JButton deleteCols2;
    private javax.swing.JButton deleteCols3;
    private javax.swing.JButton deleteCols4;
    private javax.swing.JButton deleteCols5;
    private javax.swing.JButton deleteCols6;
    private javax.swing.JButton deleteTable2;
    private javax.swing.JButton deleteTable3;
    private javax.swing.JButton deleteTable4;
    private javax.swing.JRadioButton descending;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField key1;
    private javax.swing.JTextField key2;
    private javax.swing.JTextField key3;
    private javax.swing.JTextField key4;
    private javax.swing.JTextField key5;
    private javax.swing.JTextField key6;
    private javax.swing.ButtonGroup outputType;
    private javax.swing.JLabel prompting1;
    private javax.swing.JLabel prompting2;
    private javax.swing.JRadioButton question2;
    private javax.swing.JRadioButton question3;
    private javax.swing.JRadioButton question4;
    private javax.swing.JComboBox<String> relation1;
    private javax.swing.JComboBox<String> relation2;
    private javax.swing.JComboBox<String> relation3;
    private javax.swing.JComboBox<String> relation4;
    private javax.swing.JComboBox<String> relation5;
    private javax.swing.JComboBox<String> relation6;
    private javax.swing.JButton search1;
    private javax.swing.JButton search2;
    private javax.swing.JButton search3;
    private javax.swing.JTextField searchTerm1;
    private javax.swing.JTextField searchTerm2;
    private javax.swing.JComboBox<String> sort;
    private javax.swing.ButtonGroup sortBy;
    private javax.swing.JRadioButton textFile;
    private javax.swing.JRadioButton window;
    // End of variables declaration//GEN-END:variables

}
